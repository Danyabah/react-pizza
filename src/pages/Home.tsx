import React, { useEffect, useRef } from "react";
import Sort, { sortNames } from "../components/Sort";
import Categories from "../components/Categories";
import PizzaBlock from "../components/PizzaBlock";
import PizzaSkeleton from "../components/PizzaSkeleton";
import qs from "qs";
import { useNavigate } from "react-router-dom";
import { setFilters } from "../Redux/Slices/filterSlice";
import { fetchPizzas } from "../Redux/Slices/pizzaSlice";
import { useAppDispatch, useAppSelector } from "../Redux/store";

export default function Home() {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const isSearch = useRef(false);
  const isMounted = useRef(false);

  const filterInfo = useAppSelector((state) => state.filter);

  const search = useAppSelector((state) => state.search.search);

  const { items, status } = useAppSelector((state) => state.pizza);

  const { category, sort, order } = filterInfo;

  const getPizzas = async () => {
    dispatch(fetchPizzas({ ...filterInfo }));
    window.scrollTo(0, 0);
  };

  // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞, —Ç–æ –Ω–µ –≤—à–∏–≤–∞–µ–º –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ã,
  // –∏–Ω–∞—á–µ –≤—à–∏–≤–∞–µ–º
  useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sort,
        category,
        order,
      });

      navigate(`?${queryString}`);
    }
    isMounted.current = true;

    // TODO: –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞
    if (!window.location.search) {
      getPizzas();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [sort, order, category]);

  // –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redux
  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));
      const category = Number(params.category);
      const sort = sortNames.find((obj) => obj.value === params.sort);
      const order = sortNames.find((obj) => obj.order === params.order);

      dispatch(
        setFilters({
          category,
          sort: sort ? sort.value : "rating",
          order: order ? order.order : "desc",
        })
      );

      isSearch.current = true;
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL, —Ç–æ–≥–¥–∞ –∂–¥–µ–º –∏—Ö –∏ –Ω–µ —Ñ–µ—Ç—á–∏–º –ø–∏—Ü—Ü—ã –µ—â–µ —Ä–∞–∑
  useEffect(() => {
    window.scrollTo(0, 0);
    if (!isSearch.current) {
      getPizzas();
    }
    isSearch.current = false;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [sort, order, category]);

  const skeletons = [...new Array(6)].map((_, i) => <PizzaSkeleton key={i} />);

  const pizzas = items
    .filter((item: any) => {
      return item.title.toLowerCase().includes(search.toLowerCase());
    })
    .map((obj: any) => {
      return <PizzaBlock key={obj.id} {...obj} />;
    });

  return (
    <div className="container">
      <div className="content__top">
        <Categories />
        <Sort />
      </div>
      {status === "error" ? (
        <div className="content__error">
          <h2>
            –ü–∏—Ü—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã <span>üòï</span>
          </h2>
          <p>
            –í–µ—Ä–æ—è—Ç–Ω–µ–π –≤—Å–µ–≥–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
            <br />
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.
          </p>
        </div>
      ) : (
        <>
          <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
          <div className="content__items">
            {status === "loading" ? skeletons : pizzas}
          </div>
        </>
      )}
    </div>
  );
}
